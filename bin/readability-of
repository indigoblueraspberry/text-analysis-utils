#!/usr/bin/env ruby
require_relative '../lib/algorithms'
require_relative '../lib/cli'

TAU::CLI.intercept help: "Pass in a file to calculate how readable is its content. Or just call with no arguments and paste a bit of text. Use Control-D when you are done pasting."

def analyse text
	words = text.split(" ").size.to_f
	sentences = text.split(/\.|\?|!/).reject{|s| s.strip.empty?}.size.to_f
	syllable_count = text.split(" ").inject(0){|sum, w| sum + Algorithms::syllable_count(w)}
	words_with_more_than_three_syllables = text.split(" ").select{|w| Algorithms::syllable_count(w) >= 3}
	ms = words_with_more_than_three_syllables.size.to_f / text.split(" ").size.to_f * 100

  stats = {:words => words, 
					 :sentences => sentences, 
					 :syllables => syllable_count, 
					 :ms => ms, 
					 :wiener_sachtextformel => Algorithms::wiener_sachtextformel(sentences, words, ms), 
					 :grade_level => Algorithms::grade(sentences, words, syllable_count)}
end

def output options
	puts
	if !options[:source].nil?
		puts "#{options[:source]}:"
	end
	puts "Number of sentences: #{options[:sentences]}"
	puts "Number of words: #{options[:words]}"
	puts "Number of syllables: #{options[:syllables]}"
	puts "Average number of syllables per word: #{ '%.2f' % (options[:syllables] / options[:words])}"
	puts "Average number of words per sentence: #{'%.2f' % (options[:words] / options[:sentences])}"
	puts "Wiener Sachtextformel: #{'%.2f' % options[:wiener_sachtextformel]}"
	puts "Fleschâ€“Kincaid Grade Level: #{'%.2f' % options[:grade_level]}"
	puts
end

if !ARGV.empty?
  ARGV.each {|filename|
    text = File.open(filename,'r'){|file| file.read}
    output(analyse(text).merge(:source => filename))
  }
else
  text = STDIN.read
  output(analyse(text))
end
